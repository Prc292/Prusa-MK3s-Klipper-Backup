# WARNING: DO NOT EDIT THIS FILE UNLESS YOU KNOW WHAT YOU ARE DOING

#Start of Charmin's additions:

# Print Start
[gcode_macro PRINT_START]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set BED_CAL_TEMP = params.BED_CAL_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(215)|float %}
    {% set EXTRUDER_CAL_TEMP = params.EXTRUDER_CAL_TEMP|default(170)|int %} ; 170*C gets common filaments like PETG, PLA, and ASA/ABS nice and soft without oozing.
    {% set PRINTER_MODEL = params.PRINTER_MODEL|default("MK3S+")|string %}
    {% set FILAMENT_TYPE = params.FILAMENT_TYPE|default("PLA")|string %}

    ; Make sure the MK3S+ uses the bed temp as the calibration temp since SuperPINDA has internal compensation
    {% if PRINTER_MODEL == "MK3S+" %}
        {% set BED_CAL_TEMP = BED_TEMP %}
    {% endif %}

    ; using TEMPERATURE_WAIT instead of M109/M190 speeds up the startup time by minutes. Klipper seems to wait
    ; with very little hysteresis and especially with the bed, this can take a long time.

    M117 Preheating...
    M140 S{BED_CAL_TEMP}             ; Start bed heating and don't wait
    M104 S{EXTRUDER_CAL_TEMP}        ; Start heating extruder and don't wait. Saves time later between bed mesh calibration and purge.
    SET_GCODE_OFFSET Z=0.0           ; Reset the G-Code Z offset
    BED_MESH_CLEAR                   ; Clear bed mesh
    G28                              ; Home the printer
    G90                              ; Absolute positioning mode
    G0 Z50 F4000                     ; Raise up a bit for any nozzle cleaning while the bed heats (and keep PINDA cool)
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED_CAL_TEMP-1} MAXIMUM={BED_CAL_TEMP+3}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={EXTRUDER_CAL_TEMP-1} MAXIMUM={EXTRUDER_CAL_TEMP+5}
    {% if PRINTER_MODEL == 'MK3S' or PRINTER_MODEL == "MK3" %}
        ; This is a poor way of utilizing PINDA. Normally one would want to calibrate it and store those values.
        ; Prusa implements calibration of temp vs offset and storage/retrival of those values in EEPROM.
        ; So for a lack of that, just always do bed mesh at the same temp.
        G0 X20 Y60 Z0.15             ; Move to pinda preheat position (based on calibration position in MK3/3S firmware)
        {% for timer in range(45,0,-1) %}
            M117 PINDA Heatsoak...{timer|int}
            G4 P1000
        {% endfor %}
    {% endif %}
    M117 Probing bed...
    BED_MESH_CALIBRATE ADAPTIVE=1    ; Measure bed mesh
    M117 Heating...
    M140 S{BED_TEMP}                 ; Start heating bed to final temp and don't wait 
    M104 S{EXTRUDER_TEMP}            ; Start heating extruder to final temp and don't wait
    G0 X0 Y-4 Z15 F4000              ; move to the purge starting position
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED_TEMP-1} MAXIMUM={BED_TEMP+3}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={EXTRUDER_TEMP-1} MAXIMUM={EXTRUDER_TEMP+5}
    M117                             ; Clear message on LCD
    PRUSA_LINE_PURGE                 ; Purge and then ready to go
    #LINE_PURGE                      ; You can use this instead of PRUSA_LINE_PURGE if you install KAMP 
    #SKEW_PROFILE LOAD=CaliFlower

# Print End
[gcode_macro PRINT_END]
gcode:
    #SET_SKEW CLEAR=1
    M83 ; extruder relative mode
    G1 E-4 ; retract filament a bit for minimizing ooze
    _TOOLHEAD_PARK_PAUSE_CANCEL    ; Park
    G90 ; absolute positioning
    G0 Z{[printer.toolhead.position.z, 50]|max} F300 ; park at least 50mm off the bed
    M84 X Y E    ; Disable steppers
    TURN_OFF_HEATERS    ; Disable heaters
    M106 S0     ; Disable fans
    BED_MESH_CLEAR    ; Clear bed mesh
    M220 S100 ; reset feedrate to 100%
    M221 S100 ; reset flow rate to 100%



[gcode_macro PRUSA_LINE_PURGE]
## Purge line macro based on the MK4
gcode:
    SAVE_GCODE_STATE NAME=prusa_line_purge
    M83 ; extruder relative mode
    G0 X0 Y-4 Z15 F4000; move to the purge starting position
    G92 E0 ; reset extruder position
    G1 E3 ; prime hotend
    G0 E7 X15 Z0.2 F500 ; purge
    G0 X25 E4 F500 ; purge
    G0 X35 E4 F650 ; purge
    G0 X45 E4 F800 ; purge
    G0 X48 Z0.05 F8000 ; wipe, move close to the bed
    G0 X51 Z0.2 F8000 ; wipe, move quickly away from the bed
    RESTORE_GCODE_STATE NAME=prusa_line_purge
    G92 E0 ; reset extruder position



[force_move]
enable_force_move: true ; enable FORCE_MOVE and SET_KINEMATIC_POSITION



## Macros below obtained from origina dz0ny repository

[gcode_macro M486]
gcode:
    CLEAR_PAUSE

[gcode_macro G80]
gcode:
    M117 Bed leveling
    BED_MESH_CALIBRATE
    G1 X0 Y0 Z0.4 F4000
    M117
    M400

[gcode_macro G81]
gcode:
 BED_MESH_OUTPUT
 
[gcode_macro M300]
gcode:
    # Use a default 1kHz tone if S is omitted.
    {% set S = params.S|default(1000)|int %}
    # Use a 10ms duration is P is omitted.
    {% set P = params.P|default(100)|int %}
    SET_PIN PIN=BEEPER_pin VALUE=0.5 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
    G4 P{P}
    SET_PIN PIN=BEEPER_pin VALUE=0
    
[gcode_macro UNLOAD_FILAMENT]
gcode:
  # Default ram distance and sequence copied from MK3.5 in https://github.com/prusa3d/Prusa-Firmware-Buddy/include/marlin/Configuration_MK3.5_adv.h
  {% set RAM_DISTANCE = params.RAM_DISTANCE|default(20)|int %}
  SAVE_GCODE_STATE NAME=unload_state
  G91
  {% if params.TEMP is defined or printer.extruder.can_extrude|lower == 'false' %}
    M117 Heating...
    # Heat up hotend to provided temp or 220 as default as that should work OK with most filaments.
    M109 S{params.TEMP|default(220, true)}
  {% endif %}
  SET_FILAMENT_SENSOR SENSOR=fsensor ENABLE=0
  M117 Unloading filament...
  G92 E0.0                      ; reset extruder distance
  G91                           ; relative positioning
  G1 E{RAM_DISTANCE} F1500      ; ram to build up pressure
  G1 E-50 F2700                 ; fast, long retract to thin the whisp
  G1 E-5 F50                    ; slow retract to break the whisp
  G1 E-50 F1500                 ; move filament past gears
  G92 E0.0                      ; reset extruder distance
  M400                          ; wait for planner to flush
  M117 Remove Filament Now!
  M300 S300 P1000               ; beep
  M117 Filament unloaded!
  RESTORE_GCODE_STATE NAME=unload_state
  SET_FILAMENT_SENSOR SENSOR=fsensor ENABLE=1
  M117                          ; clear display

[gcode_macro LOAD_FILAMENT]
gcode:
  SAVE_GCODE_STATE NAME=load_state
  G91
  # Heat up hotend to provided temp or 220 as default as that should work OK with most filaments.
  {% if params.TEMP is defined or printer.extruder.can_extrude|lower == 'false' %}
  M117 Heating...
  M109 S{params.TEMP|default(220, true)}
  {% endif %}
  SET_FILAMENT_SENSOR SENSOR=fsensor ENABLE=0
  M117 Loading filament...
  # Load the filament into the hotend area.
  G92 E0.0
  G91
  G1 E70 F400
  G1 E40 F100
  G90
  G92 E0.0
  M400
  M117 Filament loaded!
  SET_FILAMENT_SENSOR SENSOR=fsensor ENABLE=1
  RESTORE_GCODE_STATE NAME=load_state
  M117    ; clear display

[delayed_gcode clear_display]
initial_duration: 0.
gcode:
  M117



# Prusa's calibrate Z
[gcode_macro Calibrate_Z]
description: Calibrate Z axis
gcode:
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% if printer.toolhead.homed_axes != "xyz" %}
      G28http://klipperbox.local/config
    {% endif %}
    G1 X20 Y0
    G1 Z{max_z-10} F2000 #Update with Z height.
    FORCE_MOVE STEPPER=stepper_z Distance=20 Velocity=10
    G1 Z{max_z-50} F2000 # Move down
    G28 # Home again

[gcode_macro PREHEAT_PLA]
gcode:
    # Start bed heating
    M140 S60
    # Start nozzle heating
    M104 S150

[gcode_macro PREHEAT_PETG]
gcode:
    # Start bed heating
    M140 S90
    # Start nozzle heating
    M104 S160

[gcode_macro PREHEAT_TPU]
gcode:
    # Start bed heating
    M140 S50
    # Start nozzle heating
    M104 S150

# Color change or 
#[gcode_macro _CLIENT_VARIABLE]
#gcode:
#variable_custom_park_dz   : 20.0   ; custom dz value; the value in mm to lift the nozzle when move to park position

[gcode_macro M600]
description: Color change or filament runout
gcode:
    # Default to the middle front of the bed. MK4 likes the right side but with the MK3 you might need access
    #  to the idler to unjam filament during a runout. 
    #
    # No Z specified here since PAUSE hands over to _TOOLHEAD_PARK_PAUSE_CANCEL which doesn't take a Z argument.
    # If you want to change the amount of Z lift for parking, change the value of 'custom_park_dz' in mainsail.cfg.
    #
    # If a manual Z move is done, its not possible to know the restore context since this is generally followed
    #  by an asynchronous filament load and resume.
    {% set X = params.X|default(printer.toolhead.axis_maximum.x / 2)|float %}
    {% set Y = params.Y|default(-4)|float %}
    PAUSE X={X} Y={Y} Z_MIN=50
    UNLOAD_FILAMENT RAM_DISTANCE=7 ; reuse the unload routine so we don't have to maintain two implementations
    M117 Swap filament now

[gcode_macro SCREWS_TILT_PROBE]
description: "Run screws tilt calculate using the probe"
gcode:
    G28                         ; home first
    BED_MESH_CLEAR              ; clear any existing mesh
    SCREWS_TILT_CALCULATE

[gcode_macro PARK_CENTER]
gcode:
    {% if printer.toolhead.homed_axes != "xyz" %}
    G28
    {% endif %}                    ; Home all axes
    G90                     ; Use absolute positioning
    G1 Z50 F6000            ; Lift nozzle to 50mm
    G1 X105 Y105 F6000      ; Move to center of Prusa MK3S+ bed (210x210mm)


[gcode_macro TEST_SPEED]
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

description: Test for max speed and acceleration parameters for the printer. Procedure: Home -> ReadPositionFromMCU -> MovesToolhead@Vel&Accel -> Home -> ReadPositionfromMCU

gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Minimum Cruise Ratio
    {% set min_cruise_ratio = params.MIN_CRUISE_RATIO|default(0.5)|float %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x %}
        {% if x_min < 0 %}
            {% set x_min = 0 %}
        {% endif %}
    
        {% set y_min = printer.toolhead.axis_minimum.y %}
        {% if y_min < 0 %}
            {% set y_min = 0 %}
        {% endif %}
    
        {% set x_min = x_min + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = y_min + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} MINIMUM_CRUISE_RATIO={min_cruise_ratio}
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
    {% endif %}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small pattern box
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} MINIMUM_CRUISE_RATIO={printer.configfile.settings.printer.minimum_cruise_ratio} 
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
    {% endif %}

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED
    

    
    
